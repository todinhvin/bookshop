
package com.laptrinhweb.controller.web;

import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.laptrinhweb.dto.CartDTO;
import com.laptrinhweb.entity.CartEntity;
import com.laptrinhweb.service.impl.CartService;
import com.laptrinhweb.util.ValidationCartInfor;

@RestController

@RequestMapping("api/addToCart")
public class CartController {

	@Autowired
	private CartService cartService;

	@Autowired
	private ValidationCartInfor validation;

	@RequestMapping("addProduct")
	public HashMap<Long, CartDTO> addCart(@RequestBody HashMap<String, String> addCartRequest, HttpSession session) {
		
		try {
			HashMap<Long, CartDTO> cartList = (HashMap<Long, CartDTO>)session.getAttribute("myCart");
			if(cartList==null) {
				cartList = new HashMap<Long, CartDTO>();
			}
			
			String keys[] = { "book_id", "quantity", "price" };
			if (validation.validationInformation(keys, addCartRequest)) {
				long book_id = Long.parseLong(addCartRequest.get("book_id"));
				Integer quantity = Integer.parseInt(addCartRequest.get("quantity"));
				double price = Double.parseDouble(addCartRequest.get("price"));
				cartList = cartService.addCart(book_id, quantity, price, cartList);
				return ResponseEntity.ok(cartList);
			} else {
				return ResponseEntity.badRequest().body("");
			}

		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.badRequest().body("");
		}

	}

	@RequestMapping("removeProductFromCart")
	public ResponseEntity<?> removeCartWithProductId(@RequestBody HashMap<String, String> removeCartRequest) {
		try {
			String keys[] = { "cartId", "userId" };
			if (validation.validationInformation(keys, removeCartRequest)) {
				long cartId = Long.parseLong(removeCartRequest.get("cartId"));
				long userId = Long.parseLong(removeCartRequest.get("userId"));
				List<CartDTO> cartList = cartService.removeCartByUserId(cartId, userId);
				return ResponseEntity.ok(cartList);
			} else {
				return ResponseEntity.badRequest().body("");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.badRequest().body("");
		}
	}

	@RequestMapping("getCartsByUserId")
	public ResponseEntity<?> getCartsByUserId(@RequestBody HashMap<String, String> getCartRequest) {
		try {
			String keys[] = { "userId" };
			if (validation.validationInformation(keys, getCartRequest)) {
				long userId = Long.parseLong(getCartRequest.get("userId"));
				List<CartDTO> cartList = cartService.getCartByUserId(userId);
				return ResponseEntity.ok(cartList);
			} else {
				return ResponseEntity.badRequest().body("");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.badRequest().body("");
		}
	}

}
