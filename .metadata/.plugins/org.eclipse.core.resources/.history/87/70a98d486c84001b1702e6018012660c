package com.laptrinhweb.controller.web;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.laptrinhweb.dto.BookDTO;
import com.laptrinhweb.service.impl.BookService;
import com.laptrinhweb.util.MessageUtils;
import com.laptrinhweb.util.SecurityUtils;

@Controller
public class ShopController {

	@Autowired
	private BookService bookService;
	
	/*
	 * @Autowired private CartService cartService;
	 */
	@Autowired
	private MessageUtils messageUtils;

	@RequestMapping(value = "/shop", method = RequestMethod.GET)
	public ModelAndView listPage(@RequestParam(value = "page", required = true) Integer page,,
			@RequestParam(value = "message", required = false) String message) {
		BookDTO book = new BookDTO();
		book.setPage(page);
		book.setLimit();
		Pageable pageable = new PageRequest(page - 1, limit);
		book.setList(bookService.findAll(pageable));
		book.setTotalPages((int) Math.ceil((double) bookService.getTotalItems() / limit));
		ModelAndView mav = new ModelAndView("web/shop");
		mav.addObject("book", book);
		if (message != null) {
			Map<String, String> messages = messageUtils.getMessage(message);
			mav.addObject("arlet", messages.get("arlet"));
			mav.addObject("message", messages.get("message"));
		}
		return mav;
	}

	@RequestMapping(value = "/shop-details",method = RequestMethod.GET)
	public ModelAndView bookDetails(@RequestParam(value = "id", required = true) Long id) {
		Long user_id= SecurityUtils.getPrincipal().getUserId();
		BookDTO bookDTO = bookService.findOneById(id);
		ModelAndView mav = new ModelAndView("web/product_details");
		mav.addObject("book", bookDTO);
		mav.addObject("user_id",user_id);
		return mav;
	}
	
	/*
	 * @RequestMapping(value = "/checkout-cart",method = RequestMethod.GET) public
	 * ModelAndView checkoutCart() { Long user_id=
	 * SecurityUtils.getPrincipal().getUserId(); List<CartDTO> listCart =
	 * cartService.getCartByUserId(user_id); double totalPrice = 0; for(CartDTO cart
	 * : listCart) { cart.setBookDTO(bookService.findOneById(cart.getBook_id()));
	 * totalPrice +=cart.getPrice();
	 * 
	 * } ModelAndView mav = new ModelAndView("web/checkout");
	 * mav.addObject("listCart", listCart); mav.addObject("totalPrice", totalPrice);
	 * mav.addObject("user_id",user_id); return mav; }
	 */
	
	/*
	 * @RequestMapping(value = "/cart",method = RequestMethod.GET) public
	 * ModelAndView Cart() { List<CartDTO> listCart =
	 * cartService.getCartByUserId(SecurityUtils.getPrincipal().getUserId()); double
	 * totalPrice = 0; for(CartDTO cart : listCart) {
	 * cart.setBookDTO(bookService.findOneById(cart.getBook_id())); totalPrice
	 * +=cart.getPrice();
	 * 
	 * } ModelAndView mav = new ModelAndView("web/cart"); mav.addObject("listCart",
	 * listCart); mav.addObject("totalPrice", totalPrice); return mav; }
	 */
}
