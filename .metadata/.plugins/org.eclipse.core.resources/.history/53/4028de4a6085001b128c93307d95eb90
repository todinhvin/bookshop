
package com.laptrinhweb.controller.web;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.laptrinhweb.dto.CartDTO;
import com.laptrinhweb.dto.CheckoutDTO;
import com.laptrinhweb.service.impl.CartService;
import com.laptrinhweb.util.ValidationCartInfor;

@RestController

@RequestMapping("api/order")
public class OrderController {

	@Autowired
	private CartService cartService;

	@Autowired
	private ValidationCartInfor validation;

	@RequestMapping("checkout_order")
	public ResponseEntity<?> addCart(@RequestBody HashMap<String, String> checkoutRequest) {

		try {
			String keys[] = { "userId", "deliveryAddress", "note" };
			if (validation.validationInformation(keys, checkoutRequest)) {
				Long userId = Long.parseLong(checkoutRequest.get("userId"));
				List<CartDTO> cartList = cartService.getCartByUserId(userId);
				List<CheckoutDTO> checkoutList = new ArrayList<>();
				for (CartDTO cart : cartList) {
					String orderId = "" + getOrderId();
					CheckoutDTO checkoutDTO = new CheckoutDTO();
					checkoutDTO.setOrder_id(orderId);
					checkoutDTO.setDelivery_address(checkoutRequest.get("deliveryAddress"));
					checkoutDTO.setNote(checkoutRequest.get("note"));
					checkoutDTO.setUser_id(userId);
					checkoutDTO.setProduct_id(cart.getBook_id());
					checkoutDTO.setPrice(cart.getPrice());
					checkoutDTO.setQuantity(cart.getQuantity());
					checkoutDTO.setOrder_date(new Date());
					checkoutList.add(checkoutDTO);
				}

				return ResponseEntity.ok(cartService.saveProductForCheckout(checkoutList));
			} else {
				return ResponseEntity.badRequest().body("");
			}

		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.badRequest().body("");
		}

	}

	public int getOrderId() {
		Random r = new Random(System.currentTimeMillis());
		return 10000 + r.nextInt(20000);
	}

}
